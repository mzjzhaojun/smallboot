version: '3'

# 修改nginx配置文件中的接口ip 为  172.28.0.21
# 执行命令：docker-compose -f ./docker-compose-tmp.yml -p qtmp up -d mysql redis rabbitmq nginx_file
#   启用rabbitmq延时插件 docker exec tmp_rabbitmq /bin/bash -c 'rabbitmq-plugins enable rabbitmq_delayed_message_exchange'
#                  windows: rabbitmq-plugins enable rabbitmq_delayed_message_exchange
# 等待mysql数据导入后执行命令：docker-compose -f ./docker-compose-tmp.yml -p qtmp up -d api


# 网桥 -> 方便相互通讯
networks:
  sbqtmp:
    ipam:
      driver: default
      config:
        - subnet: "172.36.0.0/24"

services:
  mysql:
    image: registry.cn-hangzhou.aliyuncs.com/zhengqing/mysql:5.7  # 原镜像`mysql:5.7`
    container_name: tmp_mysql                                      # 容器名
    restart: unless-stopped                                       # 指定容器退出后的重启策略为始终重启，但是不考虑在Docker守护进程启动时就已经停止了的容器
    volumes: # 数据卷挂载路径设置,将本机目录映射到容器目录
      - "./mysql5.7/my.cnf:/etc/mysql/my.cnf"
      #      - "./mysql5.7/data:/var/lib/mysql"
      #      - "./mysql5.7/conf.d:/etc/mysql/conf.d"
      #      - "./mysql5.7/log/mysql/error.log:/var/log/mysql/error.log"
      - "./mysql5.7/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d" # 可执行初始化sql脚本的目录 -- tips:`/var/lib/mysql`目录下无数据的时候才会执行(即第一次启动的时候才会执行)
    environment: # 设置环境变量,相当于docker run命令中的-e
      TZ: Asia/Shanghai
      LANG: en_US.UTF-8
      MYSQL_ROOT_PASSWORD: root        # 设置root用户密码
      MYSQL_DATABASE: smallboot        # 初始化的数据库名称  docker-entrypoint-initdb.d 中的脚本默认会在这个库下创建表...
    #    ports: # 映射端口
    #      - "13306:3306"
    hostname: mysql
    networks:
      sbqtmp:
        ipv4_address: 172.36.0.10

  # ----------------------------------------------------------------------------------------------------------------------------
  redis:
    image: registry.cn-hangzhou.aliyuncs.com/zhengqing/redis:7.0.5                    # 镜像'redis:7.0.5'
    container_name: tmp_redis                                                             # 容器名为'redis'
    restart: unless-stopped                                                                   # 指定容器退出后的重启策略为始终重启，但是不考虑在Docker守护进程启动时就已经停止了的容器
    command: redis-server /etc/redis/redis.conf --requirepass 123456 --appendonly no # 启动redis服务并添加密码为：123456,默认不开启redis-aof方式持久化配置
    #    command: redis-server --requirepass 123456 --appendonly yes # 启动redis服务并添加密码为：123456,并开启redis持久化配置
    environment: # 设置环境变量,相当于docker run命令中的-e
      TZ: Asia/Shanghai
      LANG: en_US.UTF-8
    volumes: # 数据卷挂载路径设置,将本机目录映射到容器目录
      #      - "./redis/data:/data"
      - "./redis/config/redis.conf:/etc/redis/redis.conf"  # `redis.conf`文件内容`http://download.redis.io/redis-stable/redis.conf`
    #    ports: # 映射端口
    #      - "16379:6379"
    networks:
      sbqtmp:
        ipv4_address: 172.36.0.11

  # ----------------------------------------------------------------------------------------------------------------------------
  rabbitmq:
    image: registry.cn-hangzhou.aliyuncs.com/zhengqing/rabbitmq:3.9.1-management        # 镜像`rabbitmq:3.9.1-management` 【 注：该版本包含了web控制页面 】
    container_name: tmp_rabbitmq            # 容器名为'rabbitmq'
    hostname: my-rabbit
    restart: unless-stopped                                       # 指定容器退出后的重启策略为始终重启，但是不考虑在Docker守护进程启动时就已经停止了的容器
    environment: # 设置环境变量,相当于docker run命令中的-e
      TZ: Asia/Shanghai
      LANG: en_US.UTF-8
    volumes: # 数据卷挂载路径设置,将本机目录映射到容器目录
      - "./rabbitmq/config/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf"
      - "./rabbitmq/config/10-default-guest-user.conf:/etc/rabbitmq/conf.d/10-default-guest-user.conf"
      #      - "./rabbitmq/data:/var/lib/rabbitmq"
      - "./rabbitmq/plugins/rabbitmq_delayed_message_exchange-3.9.0.ez:/opt/rabbitmq/plugins/rabbitmq_delayed_message_exchange-3.9.0.ez"
    #      - "./rabbitmq/log:/var/log/rabbitmq"
    #    ports: # 映射端口
    #      - "25672:5672"
    #      - "15672:15672"
    networks:
      sbqtmp:
        ipv4_address: 172.36.0.12

  # ----------------------------------------------------------------------------------------------------------------------------

  nginx_file:
    image: registry.cn-hangzhou.aliyuncs.com/zhengqing/nginx:1.21.1
    container_name: tmp_nginx_file
    restart: unless-stopped
    volumes:
      - "./nginx/conf/nginx.conf:/etc/nginx/nginx.conf"
      - "./nginx/conf/conf.d/default.conf:/etc/nginx/conf.d/default.conf"
      - "./nginx/html:/usr/share/nginx/html"
    #      - "./nginx/log:/var/log/nginx"
    environment:
      TZ: Asia/Shanghai
      LANG: en_US.UTF-8
    ports:
      - "1886:80"
    networks:
      sbqtmp:
        ipv4_address: 172.36.0.13

  # ----------------------------------------------------------------------------------------------------------------------------
  api:
    image: registry.cn-hangzhou.aliyuncs.com/zhengqingya/smallboot-api:prod
    container_name: tmp_api
    restart: unless-stopped
    #    volumes:
    #      - "./sbqtmp/logs:/logs"
    environment:
      TZ: Asia/Shanghai
      LANG: en_US.UTF-8
      server.port: 888
      JAVA_OPTS: -XX:+UseG1GC
      spring.profiles.active: tmp
    #      sbqtmp.ip: 172.16.16.88  # TODO 修改为宿主机ip
    #    ports:
    #      - "11888:888"
    depends_on:
      - mysql
      - redis
      - rabbitmq
    networks:
      sbqtmp:
        ipv4_address: 172.36.0.21
    mem_limit: 3000m

  # ----------------------------------------------------------------------------------------------------------------------------
  web:
    image: registry.cn-hangzhou.aliyuncs.com/zhengqingya/smallboot-web:prod
    container_name: tmp_web
    restart: always
    environment:
      TZ: Asia/Shanghai
      LANG: en_US.UTF-8
    ports:
      - "1180:80"
    depends_on:
      - mysql
      - redis
      - api
    networks:
      sbqtmp:
        ipv4_address: 172.36.0.22